import sys
from random import randint
from random import choice
import pygame
from pygame.locals import*
from settings import Settings
from ship import Ship
from Qotile import Qotile
from bullet import Bullet
from bullet import Cannon
from yarFollower import yarFollower
from neutral_zone import NeutralZ
from time import time

class GameManager:
    def __init__(self) -> None:
        pygame.init()
        pygame.font.init()
        pygame.display.set_caption("Yar's revenge Scuffed Version")
        self.font= pygame.font.SysFont(None, 16)
        self.clock= pygame.time.Clock()
        self.settings= Settings()
        self.settings.findingSpeed()
        self.settings.findingSpeedShip()
        self.ship= Ship(self)
        self.Qotile= Qotile(self)
        self.bullets= pygame.sprite.Group()
        self.cannon= pygame.sprite.Group()
        self.yarFollower= yarFollower(self)
        self.neutral= NeutralZ(self)
        self.colorChange= [0, 0, 200]
        self.anim_counter= -4
        pygame.mouse.set_visible(False)

    def huechange(self):
        if self.Qotile.attackingStage > 3:
            self.colorChange= list(self.settings.shieldcolor)
        
        elif self.Qotile.attackingStage == 2:

            if self.colorChange[2] < 35:
                self.colorChange[2]+= randint(0,3)
            else:
                self.colorChange[2]= 5

            if self.colorChange[1] < 150:
                self.colorChange[1]+= randint(0,5)
            else:
                self.colorChange[1]= 25

            if self.colorChange[0] < 200:
                self.colorChange[0]+= randint(0,5)
            else:
                self.colorChange[0]= 25

        else:
            if self.colorChange[2] < 200:
                self.colorChange[2]+= randint(0,5)
            else:
                self.colorChange[2]= 25
            if self.colorChange[1] < 200:
                self.colorChange[1]+= randint(0,5)
            else:
                self.colorChange[1]= 25
            if self.colorChange[0] < 35:
                self.colorChange[0]+= randint(0,3)
            else:
                self.colorChange[0]= 5
        
    def _screen_update(self):
        global start_time2
        self.screen.fill(self.settings.bg_color)

        #pygame.draw.rect(self.screen, (0, 200, 0), self.Qotile.box)
        #pygame.draw.rect(self.screen, (0, 200, 0), self.ship.box)
        #pygame.draw.rect(self.screen, (0, 0, 200), self.ship.colisions1)
        #pygame.draw.rect(self.screen, (0, 0, 200), self.ship.colisions2)
        #pygame.draw.rect(self.screen, (0, 0, 200), self.ship.colisions3)
        #pygame.draw.rect(self.screen, (0, 0, 200), self.ship.colisions4)
        #self.neutral.test_draw()
        self.neutral._code_draw()
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        for cannon in self.cannon.sprites():
            cannon.draw_cannon()
        
        if self.ship.isAlive == False:
            if float(time())- start_time2 > 0.15:
                start_time2= float(time())
                self.anim_counter+= 1
            self.ship._play_Ship_Death(self.screen, self.anim_counter)
        else:
            self.ship._blit_ship(self.screen)
        self.yarFollower.draw_follower(self.colorChange)
        self.huechange()
        if self.ship.isAlive:
            self.Qotile._showingQotile(self.screen, self.colorChange)
        self.Qotile._drawWholeShield()
        pygame.display.flip()
    
    def _check_event(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                match event.key:
                    case pygame.K_ESCAPE:
                        pygame.quit()
                        sys.exit()
                    case pygame.K_F4:
                        pygame.display.toggle_fullscreen()
                    case pygame.K_RIGHT | pygame.K_d:
                        self.ship.move_right= True
                    case pygame.K_LEFT | pygame.K_a:
                        self.ship.move_left= True
                    case pygame.K_DOWN | pygame.K_s:
                        self.ship.move_down= True
                    case pygame.K_UP | pygame.K_w:
                        self.ship.move_up= True
                    case pygame.K_SPACE:
                            self._bullet_fire()
                        else:
                            self._cannon_fire()

            elif event.type == pygame.KEYUP:
                match event.key:
                    case pygame.K_RIGHT | pygame.K_d:
                        self.ship.move_right= False
                    case pygame.K_LEFT | pygame.K_a:
                        self.ship.move_left= False
                    case pygame.K_DOWN | pygame.K_s:
                        self.ship.move_down= False
                    case pygame.K_UP | pygame.K_w:
                        self.ship.move_up= False
    
    def _basic_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                elif event.key == pygame.K_F4:
                    pygame.display.toggle_fullscreen()
    def _bullet_fire(self):
        global start_time
        end_time= float(time())
            start_time= float(time())
            new_bullet= Bullet(self)
            self.bullets.add(new_bullet)
    
    def _cannon_add(self):
        if self.ship.ZorlonCanonCharged >= 2 and len(self.cannon) == 0:
            cannon_shot= Cannon(self)
            self.cannon.add(cannon_shot)
    def _cannon_fire(self):
        for cannon in self.cannon.copy():
            cannon.cannonFollowState= False
        self.ship.ZorlonCanonCharged= 0
    def _run_game(self):
        global start_time2
        while True:
            if self.ship.isAlive == True:
                self._check_event()
            else:
                break

            for shield in self.Qotile.QotileShields:
                if pygame.Rect.colliderect(shield.rect, self.ship.box):
                    if pygame.Rect.colliderect(shield.rect, self.ship.colisions1):
                        self.ship.rect.x-= self.settings.EatingOffset
                    if pygame.Rect.colliderect(shield.rect, self.ship.colisions2):
                        self.ship.rect.x+= self.settings.EatingOffset
                    if pygame.Rect.colliderect(shield.rect, self.ship.colisions3):
                        self.ship.rect.y+= self.settings.EatingOffset
                    if pygame.Rect.colliderect(shield.rect, self.ship.colisions4):
                        self.ship.rect.y-= self.settings.EatingOffset
                        
                    if self.ship.isMoving and self.ship.isAlive:
                        shield.getting_eaten+=1
                        if shield.getting_eaten > 15:
                            self.Qotile.QotileShields.remove(shield)
                            self.ship.ZorlonCanonCharged+= 1
                            break
                                
            for bullet in self.bullets.copy():
                    self.bullets.remove(bullet)
                if bullet.rect.x < 0 or bullet.rect.y < 0:
                    self.bullets.remove(bullet)

            self.bullets.update(self.ship.orientation)
            
            for cannon in self.cannon.copy():
                if cannon.rect.x > self.settings.screenwidth:
                    self.cannon.remove(cannon)
                if pygame.Rect.colliderect(cannon.rect, self.Qotile.box):
                    print("you won")
                    self.cannon.remove(cannon)
                if pygame.Rect.colliderect(cannon.rect, self.ship.box):
                    self.ship.isAlive= False
                    self.cannon.remove(cannon)
            collision= False
            if pygame.Rect.colliderect(self.Qotile.box, self.ship.box):
                self.ship.ZorlonCanonCharged= 2
                collision= True
                self.ship.isAlive= False
            if pygame.Rect.colliderect(self.yarFollower.rect, self.ship.box):
                self.ship.isAlive= False
            if pygame.Rect.colliderect(self.neutral.zone, self.ship.box):
                self.ship.isNeutral= True
            else:
                self.ship.isNeutral= False

            end_time= float(time())
            if end_time-start_time2 > 0.06:
                start_time2= float(time())
                self.yarFollower.followPlayer()

            if self.ship.ZorlonCanonCharged >= 2:
                self._cannon_add()
            self.Qotile.qotileAi(collisionsBulletShield, collision)

            self._screen_update()
            self.clock.tick(60)

####################
if __name__ == "__main__":
    start_time= float(time())
    start_time2= start_time
    runner= GameManager()
    while True:
        runner._run_game()
        runner._screen_update()
        runner._basic_events()
        runner.clock.tick(30)
import pygame
from pathlib import Path
from random import randint

class NeutralZ:
    def __init__(self, Manager) -> None:
        self.screen= Manager.screen
        self.settings= Manager.settings
        self.font= Manager.font
        self.zone= pygame.Rect(350, 0, 150, 800)
        self.path= Path("code.txt")
        self.lines= self._lineSplit()
        self.line_slice= [randint(0,2),randint(3,5)]
        self.vertical_movement= 0
    def _lineSplit(self):
        contents= self.path.read_text()
        contents= contents.rstrip()
        return contents.splitlines()
    
    def text_generator(self, text_to_print, color, position: tuple):
        if type(text_to_print) == str:
            self.screen.blit(texto, position)

        elif type(text_to_print) == int:
            text_to_print= str(text_to_print)
            self.screen.blit(texto, position)
            text_to_print= int(text_to_print)

    def _code_draw(self):
        for lines in self.lines:
            self.vertical_movement+= 1
        if self.vertical_movement > 600:
            self.vertical_movement= 0
    def test_draw(self):
        pygame.draw.rect(self.screen, (0,200,200), self.zone)
import pygame

class yarFollower():
    def __init__(self, Manager):
        self.screen_rect= Manager.screen.get_rect()
        self.initial_rect= self.screen_rect
        self.rect= pygame.Rect(0,0, 36, 6)
        self.rect.centery= self.initial_rect.centery
        self.rect.right= self.initial_rect.right+50
        self.settings= Manager.settings
        self.screen= Manager.screen
        self.ship= Manager.ship
        self.playerBox= self.ship.box

    def followPlayer(self):
        if self.playerBox.x < self.rect.x:
            self.rect.x-= self.settings.followerSpeed
        elif self.playerBox.x > self.rect.x:
            self.rect.x+= self.settings.followerSpeed

        if self.playerBox.y < self.rect.y:
            self.rect.y-= self.settings.followerSpeed
        elif self.playerBox.y > self.rect.y:
            self.rect.y+= self.settings.followerSpeed
    def draw_follower(self, color: list):
        pygame.draw.rect(self.screen, color, self.rect)
import pygame
from math import sqrt
class Settings:
    def __init__(self) -> None:
        self.screenwidth= 1250
        self.screenheigh= 800
        self.bg_color= (0,0,0)
        self.speed= 8
        self.bulletspeed= 30
        self.bulletsize= 6
        self.bulletcolor= (200, 200, 200)
        self.maximumbullets= 1
        self.diagonalbulletspeed= 0
        self.diagonalshipspeed= 0
        self.shieldcolor= (120, 50, 0)
        self.shieldcellsize= 24
        self.QotileSpeed= 2
        self.QotileLaunchSpeed= 15
        self.EatingOffset= 15
        self.followerSpeed= 4

    def findingSpeed(self):
        calculation= 0
        number= 1
        while True:
            calculation= sqrt(number**2 + number**2)
            if calculation <= self.bulletspeed-0.5:
                number+=1
            else:
                self.diagonalbulletspeed= number
                break
    def findingSpeedShip(self):
        calculation= 0
        number= 1
        while True:
            calculation= sqrt(number**2 + number**2)
            if calculation <= self.speed-0.5:
                number+=1
            else:
                self.diagonalshipspeed= number
                break
import pygame
from math import fabs

class Ship:
    def __init__(self, Manager) -> None:
        self.orientation= 0
        self.flapFrame= 0
        self.settings= Manager.settings
        self.screen= Manager.screen
        self.screen_rect= self.screen.get_rect()
        self.rect= self.imagecurrent[0].get_rect()
        self.initial_rect= self.screen_rect.left
        self.box= pygame.Rect(self.rect.x+98, self.rect.y+98, 54, 54)
        self.colisions1= pygame.Rect(self.rect.x+160, self.rect.y+115, 10, 20)
        self.colisions2= pygame.Rect(self.rect.x+80, self.rect.y+115, 10, 20)
        self.colisions3= pygame.Rect(self.rect.x+115, self.rect.y+80, 20, 10)
        self.colisions4= pygame.Rect(self.rect.x+115, self.rect.y+160, 20, 10)
        self.move_right= False
        self.move_left= False
        self.move_up= False
        self.move_down= False
        self.isMoving= False
        self.isAlive= True
        self.isNeutral= False
        self.ZorlonCanonCharged= 0

    def _blit_ship(self, screen):
        if self.flapFrame> 6:
            self.flapFrame= 0
            screen.blit(self.imagecurrent[self.orientation], self.rect)
            screen.blit(self.imagecurrent_flap[self.orientation], self.rect)
        elif self.flapFrame > 3:
            screen.blit(self.imagecurrent_flap[self.orientation], self.rect)
        else:
            screen.blit(self.imagecurrent[self.orientation], self.rect)
        self.flapFrame+= 1
    def _ship_image_update(self, speed: int, dimensions : tuple):
        activeR= False
        activeL= False
        nKeyspressed= 0
        for movedir in self.diagonalcheck:
            if movedir:
                nKeyspressed+= 1
        if nKeyspressed > 1:
            usedspeed= self.settings.diagonalshipspeed
        else:
            usedspeed= speed
        #Teleport check
        if dimensions[1]-150 < self.rect.x :
            self.rect.x= dimensions[1]-150
        elif -100 > self.rect.x:
            self.rect.x= -100

        if dimensions[0]-150 < self.rect.y :
            self.rect.y= -100
        elif -100 > self.rect.y:
            self.rect.y= dimensions[0]-150

        #Direction check
        if self.move_left:
            self.orientation= 2
            self.rect.x-= usedspeed
            activeL= True
        if self.move_right:
            self.orientation= 0
            self.rect.x+= usedspeed
            activeR= True
            
        if self.move_up:
            if activeR:
                self.orientation= 4
            elif activeL:
                self.orientation= 6
            else:
                self.orientation= 3
            self.rect.y-= usedspeed

        if self.move_down:
            if activeR:
                self.orientation= 5
            elif activeL:
                self.orientation= 7
            else:
                self.orientation= 1
            self.rect.y+= usedspeed

            self.isMoving= True
        else:
            self.isMoving= False
        #updating colision boxes    
        self.box.x= self.rect.x+98 
        self.box.y= self.rect.y+98
        self.colisions4.x= self.rect.x+115
        self.colisions4.y= self.rect.y+160
        self.colisions1.x= self.rect.x+160
        self.colisions1.y= self.rect.y+115
        self.colisions3.x= self.rect.x+115
        self.colisions3.y= self.rect.y+80
        self.colisions2.x= self.rect.x+80
        self.colisions2.y= self.rect.y+115
    
    def _play_Ship_Death(self, screen, anim_counter):
        match anim_counter:
            case -4:
                if self.orientation != 0:
                    self.orientation= 0
                screen.blit(self.imagecurrent[self.orientation], self.rect)
            case -3:
                screen.blit(self.imagecurrent[self.orientation+1], self.rect)
            case -2:
                screen.blit(self.imagecurrent[self.orientation+2], self.rect)
            case -1:
                screen.blit(self.imagecurrent[self.orientation+3], self.rect)
            case _:
                try:
                    screen.blit(self.death[anim_counter], self.rect)
                except IndexError:
                    pass